function para=fn_readin(crra,rho,r,inf,rmg,nbg,wealth,bencap_hc,bencap_alf,bencap_nh,marketload,singlem,singlef,couple,defer,sick_T,hcdaycount,NY,LTCI)

if singlem==1 || singlef==1;
    
    para.crra=crra;
    para.defer=defer;
    para.sick_T=sick_T;
    para.singlem=singlem;
    para.singlef=singlef;
    para.couple=couple;
    para.marketload=marketload;
    para.hcdaycount=hcdaycount;
    AFP_D=zeros(10,1);
    if NY==-1;
        if wealth==0;
            para.wealth=40;
            para.alpha=0.98;
        elseif wealth==1;
            para.wealth=58.450;
            para.alpha=0.98;
        elseif wealth==2;
            para.wealth=93.415;
            para.alpha=0.91;
        elseif wealth==3;
            para.wealth=126.875;
            para.alpha=0.82;
        elseif wealth==4;
            para.wealth=169.905;
            para.alpha=0.70;
        elseif wealth==5;
            para.wealth=222.570;
            para.alpha=0.60;
        elseif wealth==6;
            para.wealth=292.780;
            para.alpha=0.52;
        elseif wealth==7;
            para.wealth=385.460;
            para.alpha=0.41;
        elseif wealth==8;
            para.wealth=525.955;
            para.alpha=0.35;
        elseif wealth==9;
            para.wealth=789.475;
            para.alpha=0.26;
        end;
    elseif NY==0 || NY==1;
        para.cpi2000=172.192;
        para.cpi2002=179.867;
        para.cpi2011=224.937;
        para.cpi2012=229.613; % until November;
        if wealth==0;
            para.wealth=40*para.cpi2011/para.cpi2000;
            para.alpha=0.98;
        elseif wealth==1;
            para.wealth=58.450*para.cpi2011/para.cpi2000;
            para.alpha=0.98;
        elseif wealth==2;
            para.wealth=93.415*para.cpi2011/para.cpi2000;
            para.alpha=0.91;
        elseif wealth==3;
            para.wealth=126.875*para.cpi2011/para.cpi2000;
            para.alpha=0.82;
        elseif wealth==4;
            para.wealth=169.905*para.cpi2011/para.cpi2000;
            para.alpha=0.70;
        elseif wealth==5;
            para.wealth=222.570*para.cpi2011/para.cpi2000;
            para.alpha=0.60;
        elseif wealth==6;
            para.wealth=292.780*para.cpi2011/para.cpi2000;
            para.alpha=0.52;
        elseif wealth==7;
            para.wealth=385.460*para.cpi2011/para.cpi2000;
            para.alpha=0.41;
        elseif wealth==8;
            para.wealth=525.955*para.cpi2011/para.cpi2000;
            para.alpha=0.35;
        elseif wealth==9;
            para.wealth=789.475*para.cpi2011/para.cpi2000;
            para.alpha=0.26;
        end;
    end;
    para.cash=para.wealth*(1-para.alpha);
    
    % Input parameters.
    para.cons_healthy=0;
    para.cons_hc=0; % partial of hcexp (home care expenses) could enter into utility function;
    para.cons_alf=0.644; % consumption generated by living in assisted living facilities;
    para.cons_nh=0.644; % consumption generated by living in nursing homes;
    para.cbar_hc=0.674; % home care consumption under Medicaid;
    para.wbar=2; % Medicaid asset test;
    para.cbar_alf=0.03; % assisted living facility consumption under Medicaid;
    para.cbar_nh=0.03; % nursing home consumption under Medicaid;
    para.Mcare=0.35; % percent of medical expenses paid by Medicare in home care;
    para.quality_hc=1; % quality factor of Medicaid medical care;
    para.quality_alf=1;
    para.quality_nh=1;
    para.Mcaid=1; % whether there is a medicaid program;
    para.startingage=65;
    para.maxage=105;
    para.T=(para.maxage-para.startingage)*12;
    
    % Convert annual growth rates into monthly growth rates;
    para.RB=((1+r)^(1/12));
    para.discount=1/((1+rho)^(1/12));
    para.inflation=(1+inf)^(1/12);
    para.nmgrowth=(1+rmg+inf)^(1/12);
    para.nbgrowth=(1+nbg)^(1/12); % adjust nbg (normal benefit growth rate) to get desired level of compound inflation protection. 
    para.rfactor=cumprod(para.RB*ones(para.T,1));
    para.dfactor=cumprod(para.discount*ones(para.T,1));
    para.ifactor=cumprod(para.inflation*ones(para.T,1));
    para.mfactor=cumprod(para.nmgrowth*ones(para.T,1));
    para.bfactor=cumprod(para.nbgrowth*ones(para.T,1));

    para.bamt_hc=bencap_hc*30;            % Daily hc  benefit *30 days;
    para.bamt_alf=bencap_alf*30;          % Daily alf benefit *30 days;
    para.bamt_nh=bencap_nh*30;            % Daily nh  benefit *30 days;
    if NY==0;
        para.nhamt=78.110/12;      	    % Monthly cost of NH  $51480;
        para.alfamt=41.724/12;          % Monthly cost of ALF $25908 per year;
        para.hcnonrn=0.021;             % Hourly HC costs (non RN);
        para.hcrn=0.043;                % Hourly HC costs (RN);
    elseif NY==1;
        para.nhamt=125.560/12;      	% Monthly cost of NH  $51480;
        para.alfamt=46.404/12;          % Monthly cost of ALF $25908 per year;
        para.hcnonrn=0.022;             % Hourly HC costs (non RN);
        para.hcrn=0.045;                % Hourly HC costs (RN);   
    elseif NY==-1;
        para.nhamt=51.48/12;      	    % Monthly cost of NH  $51480;
        para.alfamt=25.908/12;          % Monthly cost of ALF $25908 per year;
        para.hcnonrn=0.018;             % Hourly HC costs (non RN);
        para.hcrn=0.037;                % Hourly HC costs (RN);
        para.cons_alf=0.515; % consumption generated by living in assisted living facilities;
        para.cons_nh=0.515; % consumption generated by living in nursing homes;
        para.cbar_hc=0.545; % consumption under Medicaid;
    end;
    
    load trans
    if para.singlem==1;
        para.q=qmi;
        para.hcamt0=hcexp0mi65; % unskilled nurse.
        para.hcamt1=hcexp1mi65; % skilled nurse.        
    elseif para.singlef==1;
        para.q=qfi;
        para.hcamt0=hcexp0fi65;
        para.hcamt1=hcexp1fi65;
    end;
    % CREATE MONTHLY TRANSITION MATRIX
    para.q=kron(para.q(1:(para.maxage-65),2:26),ones(12,1));
%     para.q(:,1)=ones(para.T,1);
%     para.q(:,2:25)=zeros(para.T,24);
    % CREATE ACTUARIALLY FAIR PREMIUM
    % Turn conditional probabilities into unconditional probabilies
    para.prob = zeros(size(para.q,1) + 1,5); % initialize;
    para.prob(1,1) = 1; % everyone starts out of care;
    for i=2:size(para.q,1)+1;
          para.prob(i,1) = para.q(i-1,1)*para.prob(i-1,1) + para.q(i-1,6)*para.prob(i-1,2) + para.q(i-1,11)*para.prob(i-1,3) + para.q(i-1,16)*para.prob(i-1,4);
          para.prob(i,2) = para.q(i-1,2)*para.prob(i-1,1) + para.q(i-1,7)*para.prob(i-1,2) + para.q(i-1,12)*para.prob(i-1,3) + para.q(i-1,17)*para.prob(i-1,4);
          para.prob(i,3) = para.q(i-1,3)*para.prob(i-1,1) + para.q(i-1,8)*para.prob(i-1,2) + para.q(i-1,13)*para.prob(i-1,3) + para.q(i-1,18)*para.prob(i-1,4);
          para.prob(i,4) = para.q(i-1,4)*para.prob(i-1,1) + para.q(i-1,9)*para.prob(i-1,2) + para.q(i-1,14)*para.prob(i-1,3) + para.q(i-1,19)*para.prob(i-1,4);
          para.prob(i,5) = para.prob(i-1,5) + para.q(i-1,5)*para.prob(i-1,1) + para.q(i-1,10)*para.prob(i-1,2) + para.q(i-1,15)*para.prob(i-1,3) + para.q(i-1,20)*para.prob(i-1,4);
    end;

    % hcexp matrices have column 1=age, column 2 = expenses
    para.hcamt=(1-para.Mcare)*(para.hcamt0(:,2)*4.33333*para.hcnonrn+para.hcamt1(:,2)*4.33333*para.hcrn); % each month has 4.33333 weeks;
    para.hcamt=kron(para.hcamt(1:(para.maxage-65)+1,1),ones(12,1));
    para.hcamt=para.hcamt(1:para.T,1);

    % @ B = Benefit matrix                @    
    % @ P = Premium matrix                @
    % @ M = medical expenditure matrix    @
    % @ Rows are periods, cols are states @    
    para.P=[ones(para.T,1) zeros(para.T,4)];
    para.M=[zeros(para.T,1) para.hcamt para.alfamt*ones(para.T,1) para.nhamt*ones(para.T,1) zeros(para.T,1)];
    para.M=para.M.*(para.mfactor*ones(1,5));
    para.B=[zeros(para.T,1) para.bamt_hc*ones(para.T,1) para.bamt_alf*ones(para.T,1) para.bamt_nh*ones(para.T,1) zeros(para.T,1)];
    para.B=para.B.*(para.bfactor*ones(1,5));

    % Now take the min of benefit level and actual cost;
    para.B=(para.M.*(para.M<=para.B))+(para.B.*(para.B<para.M));
    % Now convert from nominal to real;
    para.P=para.P./(para.ifactor*ones(1,5));
    para.B=para.B./(para.ifactor*ones(1,5));
    para.M=para.M./(para.ifactor*ones(1,5)); % mfactor captures both increase in real medical costs and inflation;

    para.hcexp=para.hcamt/(1-para.Mcare).*para.mfactor./para.ifactor; % total long-term care costs, including the 35% hc costs paid by Medicare.

    if para.defer==0;
        cost = para.P.*para.prob(2:size(para.prob,1),:);
        cost = cost.*(para.dfactor*ones(1,5)); % @Discount@
        ben = para.B.*para.prob(2:size(para.prob,1),:);
        ben = ben.*(para.dfactor*ones(1,5)); % @Discount@        
        para.sben = sum(sum(ben)); % PV of total benefit received;
        para.scost = sum(sum(cost)); % EPV of total premium paid;
    elseif para.defer>0;
        for i=0:9
        para.sick_T=i*2;   
        [para.sben para.scost]=fn_premium(para);
        AFP_D(i+1) = para.sben/para.scost;
        end
    end;
    
    if para.marketload==1 && para.singlem==1;
        para.insload=0.5;
    elseif para.marketload==1 && para.singlef==1;
        para.insload=1.058;
    elseif para.marketload==0;
        para.insload=1;
    end;
    
    AFP=para.sben/para.scost;
    
    % Now replace P with actuarially fair premium * Money's Worth
    para.P=para.P*(para.sben/para.insload/para.scost);

    % Calculate monthly annuity amount
    % lifexp=sum(1-para.prob(2:size(para.prob,1),5))/12;
    para.ss=((para.alpha/(1-para.alpha))*para.cash)/sum((1-para.prob(2:size(para.prob,1),5)).*para.dfactor);
%     para.ss=0;
%     % Create LTCIown, a matrix that is para.T rows x 5 states that is the net payment
%     % to the policy holder.  Will be equal to -P when healthy, equal to benefit when
%     % receiving benefit and premium is waived, and equal to B-P when receiving
%     % benefit but policy is not waived.
%     % LTCInone is a matrix of zeros of same size as LTCIown to be used when the 
%     % individual does not own insurance	
%     para.LTCIown=para.B-para.P;
%     para.LTCInone=zeros(size(para.LTCIown));

    if LTCI==0;
        para.ds=1;
        para.grid_asset=201;
        para.ns=prod([para.grid_asset]);
    elseif LTCI==1;
        if para.defer==0 && para.sick_T==0;
            para.ds=1;
            para.grid_asset=201;
            para.ns=prod([para.grid_asset]);
        elseif para.defer==1;
            para.ds=3;
            para.grid_asset=201;
            para.grid_sick_t=para.sick_T+2; % for +2: one is 0, the other is over limit.
            para.grid_protect=2;
            para.ns=prod([para.grid_asset para.grid_sick_t para.grid_protect]);
        elseif para.defer==2;
            para.ds=3;
            para.grid_asset=201;
            para.grid_medcost_nominal=51;
            para.grid_protect=2;
            para.ns=prod([para.grid_asset para.grid_medcost_nominal para.grid_protect]);
        elseif para.defer>=3;
        end;
    end;
    para.dx=1;
    para.grid_consumption=101;
    para.nx=prod([para.grid_consumption]);
    para.nc=para.ns*para.nx;
    
elseif couple==1;
end;




















